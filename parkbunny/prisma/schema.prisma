generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  createdAt DateTime @default(now())
  reports   Report[]
}

model Report {
  id                String           @id @default(cuid())
  name              String
  postcodes         String
  settings          Json
  createdAt         DateTime         @default(now())
  userId            String?
  shareCode         String?          @unique
  shareEnabled      Boolean          @default(false)
  shareExpiresAt    DateTime?
  shareLastViewedAt DateTime?
  sharePasswordHash String?
  shareViewCount    Int              @default(0)
  archived          Boolean          @default(false)
  businesses        Business[]
  user              User?            @relation(fields: [userId], references: [id])
  locations         ReportLocation[]
}

model Business {
  id       String  @id @default(cuid())
  name     String
  category String
  address  String
  website  String?
  mapsLink String?
  reportId String?
  report   Report? @relation(fields: [reportId], references: [id])
}

model ReportLocation {
  id            String                @id @default(cuid())
  reportId      String
  postcode      String
  latitude      Float?
  longitude     Float?
  radiusMeters  Int?
  params        Json?
  lastFetchedAt DateTime?
  createdAt     DateTime              @default(now())
  status        LocationStatus        @default(PENDING)
  report        Report                @relation(fields: [reportId], references: [id])
  places        ReportLocationPlace[]

  @@unique([reportId, postcode], name: "reportId_postcode")
}

model Place {
  id             String                @id @default(cuid())
  placeId        String                @unique
  name           String
  types          String
  rating         Float?
  priceLevel     Int?
  lat            Float?
  lng            Float?
  address        String?
  website        String?
  phone          String?
  status         String?
  raw            Json?
  createdAt      DateTime              @default(now())
  parkingOptions Json?
  links          ReportLocationPlace[]
}

model ReportLocationPlace {
  id              String               @id @default(cuid())
  locationId      String
  placeId         String
  groupedCategory String?
  matchedKeyword  String?
  createdAt       DateTime             @default(now())
  included        Boolean              @default(true)
  location        ReportLocation       @relation(fields: [locationId], references: [id])
  place           Place                @relation(fields: [placeId], references: [id])
  campaigns       CampaignBusiness[]

  @@unique([locationId, placeId])
}

model Campaign {
  id          String            @id @default(cuid())
  name        String
  businessType String
  postcode    String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  businesses  CampaignBusiness[]
}

model CampaignBusiness {
  id                    String               @id @default(cuid())
  campaignId            String
  reportLocationPlaceId String
  createdAt             DateTime             @default(now())
  campaign              Campaign             @relation(fields: [campaignId], references: [id])
  reportLocationPlace   ReportLocationPlace  @relation(fields: [reportLocationPlaceId], references: [id])

  @@unique([campaignId, reportLocationPlaceId])
}

model Feedback {
  id             String         @id @default(cuid())
  type           FeedbackType
  title          String
  details        String?
  status         FeedbackStatus @default(OPEN)
  createdAt      DateTime       @default(now())
  createdById    String?
  createdByEmail String?
  completedAt    DateTime?
}

enum FeedbackType {
  BUG
  FEATURE
}

enum FeedbackStatus {
  OPEN
  DONE
}

enum LocationStatus {
  PENDING
  LIVE
}
